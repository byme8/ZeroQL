[  
// This file generated for ZeroQL.
// <auto-generated/>
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Net.Http;
using ZeroQL;
using ZeroQL.Stores;
using ZeroQL.Json;
using ZeroQL.Internal;

#nullable enable

namespace ZeroQL.TestApp
{
    [System.CodeDom.Compiler.GeneratedCode("ZeroQL", "1.0.0.0")]
    internal static class ZeroQLModuleInitializer_7dd7e5911465345a74b16a2b3f268147f97ee76175184c3c02b352a2ce4b05a4
    {
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        public static void Init()
        {
            GraphQLQueryStore<global::GraphQL.TestServer.Query>.Executor["static q => q.Me(o => o.FirstName)"] = Execute;
            GraphQLQueryStore<global::GraphQL.TestServer.Query>.Query["static q => q.Me(o => o.FirstName)"] = new QueryInfo 
            {
                Query = "query { me { firstName } }",
                QueryBody = "{ me { firstName } }",
                OperationType = "query",
                Hash = "8ed4d3e773b6f87d986cc128a716cfc85d030c5fe6a5b585ab0c0820ac5d9728",
            };
        }

        public static async Task<GraphQLResult<global::GraphQL.TestServer.Query>> Execute(QueryExecuteContext context)
        {
            var qlClient = context.Client; 
            var variables = (global::System.Collections.Generic.Dictionary<string, object>)context.Variables!;
            var qlResponse = await qlClient.QueryPipeline.ExecuteAsync<global::GraphQL.TestServer.Query>(qlClient.HttpHandler, context.QueryKey, context.Variables, context.CancellationToken, queryRequest => 
            {
                
                var requestJson = JsonSerializer.Serialize(queryRequest, ZeroQLJsonOptions.Options); 
                var content = new StringContent(requestJson, Encoding.UTF8, "application/json");
                return content;
            });

            return new GraphQLResult<global::GraphQL.TestServer.Query>
            {
                HttpResponseMessage = qlResponse.HttpResponseMessage,
                Query = qlResponse.Query,
                Data = qlResponse.Data,
                Errors = qlResponse.Errors?.Length > 0 ? qlResponse.Errors : null,
                Extensions = qlResponse.Extensions
            };
        }

        
    }
}
]