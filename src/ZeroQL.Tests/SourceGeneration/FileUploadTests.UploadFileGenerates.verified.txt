[  
// This file generated for ZeroQL.
// <auto-generated/>
using System;
using System.Threading;
using System.Threading.Tasks;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Net.Http;
using ZeroQL;
using ZeroQL.Stores;
using ZeroQL.Json;
using ZeroQL.Internal;

#nullable enable

namespace ZeroQL.TestApp
{
    [System.CodeDom.Compiler.GeneratedCode("ZeroQL", "1.0.0.0")]
    internal static class ZeroQLModuleInitializer_9c81b4d88da4af646a1989f7a0fe111a352b8cfd3a7129eb18173410470f46d5
    {
        [global::System.Runtime.CompilerServices.ModuleInitializer]
        public static void Init()
        {
            GraphQLQueryStore<global::GraphQL.TestServer.Mutation>.Executor["static (i, m) => m.AddUsersInfo(i.Users)"] = Execute;
            GraphQLQueryStore<global::GraphQL.TestServer.Mutation>.Query["static (i, m) => m.AddUsersInfo(i.Users)"] = new QueryInfo 
            {
                Query = "mutation ($users: [UserInfoInput!]!) { addUsersInfo(users: $users)}",
                QueryBody = "($users: [UserInfoInput!]!) { addUsersInfo(users: $users)}",
                OperationType = "mutation",
                Hash = "21d84e505fc57d8b3b4cbd21e879e625c8c4589d317ea1a8c34937d1c32b7e26",
            };
        }

        public static async Task<GraphQLResult<global::GraphQL.TestServer.Mutation>> Execute(QueryExecuteContext context)
        {
            var qlClient = context.Client; 
            var variables = (object?)context.Variables!;
            var qlResponse = await qlClient.QueryPipeline.ExecuteAsync<global::GraphQL.TestServer.Mutation>(qlClient.HttpHandler, context.QueryKey, context.Variables, context.CancellationToken, queryRequest => 
            {
                
                var context = new MultipartFormDataContentContext();
                Process_globalGenerticOfanonymoustypeglobalGraphQLTestServerUserInfoInputArrayOfUsers(context, variables, "variables");

                var content = new MultipartFormDataContent();
                content.Headers.Add("GraphQL-preflight", "1");

                var queryJson = JsonSerializer.Serialize(queryRequest, ZeroQLJsonOptions.Options);
                content.Add(new StringContent(queryJson), "operations");

                var map = context.Uploads.ToDictionary(o => o.Index,  o => new [] { o.Path });
                var mapJson = JsonSerializer.Serialize(map, ZeroQLJsonOptions.Options);
                content.Add(new StringContent(mapJson), "map");
                foreach(var uploadInfo in context.Uploads)
                {
                    var upload = uploadInfo.Getter();
                    content.Add(new StreamContent(upload.Stream), uploadInfo.Index.ToString(), upload.FileName);
                };

                return content;
            });

            return new GraphQLResult<global::GraphQL.TestServer.Mutation>
            {
                HttpResponseMessage = qlResponse.HttpResponseMessage,
                Query = qlResponse.Query,
                Data = qlResponse.Data,
                Errors = qlResponse.Errors?.Length > 0 ? qlResponse.Errors : null,
                Extensions = qlResponse.Extensions
            };
        }

        
        private static void Process_globalGraphQLTestServerUserInfoInput(MultipartFormDataContentContext context, global::GraphQL.TestServer.UserInfoInput value, string path)
        {
            if (value == null)
            {
                return;
            }
                     
            {
                var propertyValue = value.Avatar;
                if (propertyValue is not null)
                {
                    var index = context.Uploads.Count;
                    var uploadEntry = new UploadEntry
                    {
                        Index = index,
                        Path = $"{path}.avatar",
                        Getter = () => (ZeroQL.Upload)propertyValue,
                    };
                    context.Uploads.Add(uploadEntry);
                }
            }

        }

        private static void Process_globalGenerticOfanonymoustypeglobalGraphQLTestServerUserInfoInputArrayOfUsers(MultipartFormDataContentContext context, object? value, string path)
        {
            if (value == null)
            {
                return;
            }
            
            {
                var propertyValue = (global::GraphQL.TestServer.UserInfoInput[])ZeroQLReflectionCache.Get(value, "Users");
                if (propertyValue is not null)
                {
                    for(var i = 0; i < propertyValue.Length; i++)
                    {
                        Process_globalGraphQLTestServerUserInfoInput(context, propertyValue[i], path + $".users.{i}");
                    }
                };
            }

        }

    }
}
]